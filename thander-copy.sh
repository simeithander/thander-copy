#!/bin/bash

# Fun√ß√£o para limpar caminhos removendo aspas simples e duplas
clean_path() {
    local path="$1"
    
    # Remove aspas simples do in√≠cio e fim
    while [[ "${path:0:1}" == "'" && "${path: -1}" == "'" ]]; do
        path="${path:1:-1}"
    done
    
    # Remove aspas duplas do in√≠cio e fim
    while [[ "${path:0:1}" == '"' && "${path: -1}" == '"' ]]; do
        path="${path:1:-1}"
    done
    
    # Remove espa√ßos em branco no in√≠cio e fim
    path=$(echo "$path" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    echo "$path"
}

# Loop principal do script
while true; do
    # Limpa o terminal para uma exibi√ß√£o mais limpa
    clear

    cat << "EOF"
‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°
‚ö° THANDER COPY ‚ö°
‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°‚ö°

EOF
    echo "Uma ferramenta poderosa para copiar arquivos e pastas com verifica√ß√£o de integridade."
    echo "üí° Para sair do script, pressione Ctrl + C"
    echo

    # Solicita ao usu√°rio o arquivo ou pasta de origem
    # O `read -e` permite o uso do autocompletar com a tecla TAB
    echo "Arraste ou digite o caminho do arquivo/pasta de ORIGEM e pressione Enter:"
    read -e SOURCE
    echo

    # Solicita ao usu√°rio a pasta de destino
    echo "Arraste ou digite o caminho da pasta de DESTINO e pressione Enter:"
    read -e DESTINATION
    echo

    # Limpa os caminhos de origem e destino
    SOURCE=$(clean_path "$SOURCE")
    DESTINATION=$(clean_path "$DESTINATION")

    # --- Valida√ß√µes Iniciais ---

    # Verifica se a origem realmente existe
    if [ ! -e "$SOURCE" ]; then
        echo
        echo "‚ùå ERRO: O caminho de origem '$SOURCE' n√£o foi encontrado."
        echo "Pressione Enter para tentar novamente..."
        read
        continue
    fi

    # Verifica se o destino √© um diret√≥rio v√°lido
    if [ ! -d "$DESTINATION" ]; then
        echo
        echo "‚ùå ERRO: O diret√≥rio de destino '$DESTINATION' n√£o existe ou n√£o √© v√°lido."
        echo "Pressione Enter para tentar novamente..."
        read
        continue
    fi

    echo
    echo "Origem:  $SOURCE"
    echo "Destino: $DESTINATION"
    echo
    echo "Copiando os arquivos..."
    echo "----------------------------------------------------"

    # --- Comando de C√≥pia ---
    # Utiliza o rsync para a c√≥pia. Veja a explica√ß√£o dos par√¢metros abaixo:
    #
    # -a, --archive:     Modo de arquivamento, equivale a -rlptgoD. Copia recursivamente
    #                    e preserva permiss√µes, dono, timestamps, etc.
    # -h, --human-readable: Mostra os n√∫meros em formato leg√≠vel para humanos (ex: KB, MB, GB).
    # --info=progress2:  Mostra o progresso total da transfer√™ncia, n√£o apenas por arquivo.
    #                    Isso nos d√° o percentual geral, tamanho total, velocidade e tempo restante.
    # --checksum:        For√ßa a verifica√ß√£o de checksum em todos os arquivos. Ap√≥s a c√≥pia,
    #                    o rsync rel√™ o arquivo na origem e no destino para garantir que
    #                    s√£o id√™nticos. Esta √© a verifica√ß√£o de integridade.
    # "$SOURCE":         A origem (entre aspas para tratar nomes com espa√ßos).
    # "$DESTINATION":    O destino (entre aspas).

    rsync -ah --info=progress2 --checksum "$SOURCE" "$DESTINATION"

    # Captura o c√≥digo de sa√≠da do rsync. 0 significa sucesso.
    EXIT_CODE=$?

    # --- Verifica√ß√£o Final ---

    echo "----------------------------------------------------"

    # Verifica o c√≥digo de sa√≠da para determinar se tudo correu bem
    if [ $EXIT_CODE -eq 0 ]; then
        echo "‚úÖ C√≥pia conclu√≠da e dados verificados com sucesso!"
        echo "Os arquivos em '$SOURCE' e '$DESTINATION' s√£o id√™nticos."
    else
        echo "‚ùå ATEN√á√ÉO: Ocorreu um erro durante a c√≥pia ou a verifica√ß√£o."
        echo "O processo retornou o c√≥digo de erro: $EXIT_CODE"
    fi

    echo "----------------------------------------------------"
    echo
    echo "üîÑ Preparando para pr√≥xima c√≥pia..."
    echo "Pressione Enter para continuar ou Ctrl + C para sair..."
    read
done
